h=6.62606896e-34
c=2.99792458e8
k=1.3806504e-23
lambda = seq(1e-8,1e-4, by=1e-8)
T = 6000
y=(2*pi*h*(c^2))/(lambda^5)*(1./(exp((h*c)/(lambda*k*T))-1))
T2 = 288
y2=(2*pi*h*(c^2))/(lambda^5)*(1./(exp((h*c)/(lambda*k*T2))-1))
plot(1e6*lambda,1e-6*1e-6*y, xlim=c(0.0,5.0),ylim=c(0.0,100.0), xlab='Wavelength (um)', ylab='spectral emittance (MW/m2/um)')
# par(new=T)
# plot(1e6*lambda,1e-6*1e-6*y2, xlim=c(0.0,10.0), ylim=c(0.0,1/10000.0), xlab='', ylab='', axes=F)
# par(new=F)
plot(1e6*lambda,1e-6*1e-6*y2, xlim=c(0.0,50.0), ylim=c(0.0,3*1e-5), xlab='Wavelength (um)', ylab='spectral emittance (MW/m2/um)')
T2 = 288
T2 = 288
y=(2*pi*h*(c^2))/(lambda^5)*(1./(exp((h*c)/(lambda*k*T))-1))
h=6.62606896e-34
c=2.99792458e8
k=1.3806504e-23
lambda = seq(1e-8,1e-4, by=1e-8)
T = 6000
y=(2*pi*h*(c^2))/(lambda^5)*(1./(exp((h*c)/(lambda*k*T))-1))
T2 = 288
y2=(2*pi*h*(c^2))/(lambda^5)*(1./(exp((h*c)/(lambda*k*T2))-1))
plot(1e6*lambda,1e-6*1e-6*y, xlim=c(0.0,5.0),ylim=c(0.0,100.0), xlab='Wavelength (um)', ylab='spectral emittance (MW/m2/um)')
# par(new=T)
# plot(1e6*lambda,1e-6*1e-6*y2, xlim=c(0.0,10.0), ylim=c(0.0,1/10000.0), xlab='', ylab='', axes=F)
# par(new=F)
plot(1e6*lambda,1e-6*1e-6*y2, xlim=c(0.0,50.0), ylim=c(0.0,3*1e-5), xlab='Wavelength (um)', ylab='spectral emittance (MW/m2/um)')
y = (h*c)/(lambda*k*T)
y
plot(lambda,y)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("readr")
h=6.62606896e-34
c=2.99792458e8
k=1.3806504e-23
lambda = seq(4.00e-7,7.05e-7, by=1e-10)
T = 5800
# Equation 1
y = (h*c)/(lambda*k*T)
plot(lambda2,y,xlab='Wavelength (m)',ylab='Plancks Exponential',main='Equation 1')
h=6.62606896e-34
c=2.99792458e8
k=1.3806504e-23
lambda = seq(4.00e-7,7.05e-7, by=1e-10)
T = 5800
# Equation 1
y = (h*c)/(lambda*k*T)
plot(lambda2,y,xlab='Wavelength (m)',ylab='Plancks Exponential',main='Equation 1')
h=6.62606896e-34
c=2.99792458e8
k=1.3806504e-23
lambda = seq(4.00e-7,7.05e-7, by=1e-10)
T = 5800
# Equation 1
y = (h*c)/(lambda*k*T)
plot(lambda,y,xlab='Wavelength (m)',ylab='Plancks Exponential',main='Equation 1')
# Equation 2
I=((2*pi)*(h)*(c**2)/((lambda**5)*(exp(y)-1)))
plot(lambda,I,xlab='Wavelength (m)',ylab='Spectral Emittance (W/m^2/m)',main='Equation 2')
# Equation 3
Ilambda = (I*(max(lambda)-min(lambda)))*1e-6
plot(I,Ilambda,xlab='Spectral Emittance (W/m^2/m)',ylab='Intensity (MW/m^2)',main='Equation 3')
knitr::opts_chunk$set(echo = TRUE)
library(readr)
tab<-read_csv("https://raw.githubusercontent.com/Agron508/Homework/master/SS-110_1010_12918noon.csv")
library(dplyr)
library(ggplot2)
data<-tab[2:482,] # select rows
data<-data %>% rename(waveL=Timestamp) # rename column
data$waveL<-as.numeric(as.vector(data$waveL)) # to get a x_continous scale, data need to be numeric not factor
time<-data[,82]# here I just pick a column randomly
class(time)
# time has to be converted into numeric
time<-as.numeric(unlist(time)) # I used unlist to convert all the element to a single numeric vector
ggplot(data=data,aes(x=waveL,y=time))+
geom_line() +
scale_x_continuous(breaks = round(seq(min(data$waveL), max(data$waveL), by = 100),1)) +
scale_y_continuous(breaks = round(seq(min(time), max(time), by = 0.005),1)) +
xlab("wavelength (nm)") +
ylab("Irradiance")
# Equation 1
y = (h*c)/(lambda*k*T)
plot(lambda,y,xlab='Wavelength (m)',ylab='Plancks Exponential',main='Equation 1')
# Equation 2
I=((2*pi)*(h)*(c**2)/((lambda**5)*(exp(y)-1)))
plot(lambda,I,xlab='Wavelength (m)',ylab='Spectral Emittance (W/m^2/m)',main='Equation 2')
# Equation 3
Ilambda = (I*(max(lambda)-min(lambda)))*1e-6
plot(I,Ilambda,xlab='Spectral Emittance (W/m^2/m)',ylab='Intensity (MW/m^2)',main='Equation 3')
h=6.62606896e-34
c=2.99792458e8
k=1.3806504e-23
lambda = seq(3.4e-7,8.05e-7, by=1e-10)
T = 5800
# Equation 1
y = (h*c)/(lambda*k*T)
plot(lambda,y,xlab='Wavelength (m)',ylab='Plancks Exponential',main='Equation 1')
# Equation 2
I=((2*pi)*(h)*(c**2)/((lambda**5)*(exp(y)-1)))
plot(lambda,I,xlab='Wavelength (m)',ylab='Spectral Emittance (W/m^2/m)',main='Equation 2')
# Equation 3
Ilambda = (I*(max(lambda)-min(lambda)))*1e-6
plot(I,Ilambda,xlab='Spectral Emittance (W/m^2/m)',ylab='Intensity (MW/m^2)',main='Equation 3')
h=6.62606896e-34
c=2.99792458e8
k=1.3806504e-23
#lambda = seq(3.4e-7,8.05e-7, by=1e-10)
lambda = seq(6.0e-7,6.05e-7, by=1e-10)
T = 5800
# Equation 1
y = (h*c)/(lambda*k*T)
plot(lambda,y,xlab='Wavelength (m)',ylab='Plancks Exponential',main='Equation 1')
# Equation 2
I=((2*pi)*(h)*(c**2)/((lambda**5)*(exp(y)-1)))
plot(lambda,I,xlab='Wavelength (m)',ylab='Spectral Emittance (W/m^2/m)',main='Equation 2')
# Equation 3
Ilambda = (I*(max(lambda)-min(lambda)))*1e-6
plot(I,Ilambda,xlab='Spectral Emittance (W/m^2/m)',ylab='Intensity (MW/m^2)',main='Equation 3')
integrate(I,lower = min(lambda), upper = max(lambda))
band_data = data[263:268,82]
View(band_data)
#Intensity of radiation reaching the eye in order for the human eye to percieve light.
I = 4.0e-4 # Units - W/m^2
#Plancks Constant
h = 6.63e-34 # Units - J*s
#Speed of light in a vacuum
c = 3.0e8 # Units - m/s
#Diameter of a human pupil
d = [2,3,4,5,6,7,8] # Units - mm
#Diameter of a human pupil
d = seq(2,8,by = 1) # Units - mm
#Convert the diameter to meters
d = d*1e-3 # Units - m
#Calculate the pupil area
pupil_area = pi*((d/2)^2) # Units - m^2
#Intensity of radiation reaching the eye in order for the human eye to percieve light.
I = 4.0e-4 # Units - W/m^2
#Plancks Constant
h = 6.63e-34 # Units - J*s
#Speed of light in a vacuum
c = 3.0e8 # Units - m/s
#Diameter of a human pupil
d = seq(2,8,by = 1) # Units - mm
#Convert the diameter to meters
d = d*1e-3 # Units - m
#Calculate the pupil area
pupil_area = pi*((d/2)^2) # Units - m^2
#Power reaching the eye
Power_reach_eye = I*pupil_area # Units - W
#Range of wavelength in the visible spectrum
lam_pupil = seq(380e-9,780e-9,by = 1e-9) #Units - m
#Energy of a photon
e = (h*c)/lam_pupil
#Number of photons reaching the eye
Photons_reach_eye = Power_reach_eye / e #Units - photons/s
#Number of photons reaching the eye
Photons_reach_eye = Power_reach_eye ./ e #Units - photons/s
#Number of photons reaching the eye
Photons_reach_eye = Power_reach_eye/e #Units - photons/s
#Number of photons reaching the eye
for(i in 1:401) Photons_reach_eye(i,:) = Power_reach_eye(:)/e(i) #Units - photons/s
